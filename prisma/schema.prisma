// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Restaurant {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  coverImg      String?
  address       String
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    Int // relation scalar field (used in the `@relation` attribute above) @unique
  owner         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int // relation scalar field (used in the `@relation` attribute above) @unique
  menu          Dish[]
  orders        Order[]
  Payment       Payment[]
  isPromoted    Boolean   @default(false)
  promotedUntil DateTime  @default(now())
}

model User {
  id           Int           @id @default(autoincrement())
  email        String
  password     String
  role         UserRole      @default(Client)
  verified     Boolean?      @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  Verification Verification?
  restaurants  Restaurant[]
  orders       Order[]       @relation("customer")
  rides        Order[]       @relation("driver")
  Payment      Payment[]
}

enum UserRole {
  Client
  Owner
  Delivery
}

model Verification {
  id     Int    @id @default(autoincrement())
  code   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique // relation scalar field (used in the `@relation` attribute above) @unique
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String
  coverImg    String?
  slug        String       @unique
  restaurants Restaurant[]
}

model Dish {
  id           Int         @id @default(autoincrement())
  name         String
  price        Int
  photo        String?
  description  String?
  type         String?
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  options      Json?
  OrderItem    OrderItem[]
}

model Order {
  id           Int         @id @default(autoincrement())
  customer     User?       @relation("customer", fields: [customerId], references: [id])
  customerId   Int?
  driver       User?       @relation("driver", fields: [driverId], references: [id], onDelete: SetNull)
  driverId     Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  items        OrderItem[]
  total        Int?
  status       OrderStatus @default(Pending)
}

model OrderItem {
  id      Int     @id @default(autoincrement())
  dish    Dish    @relation(fields: [dishId], references: [id])
  dishId  Int
  Order   Order[]
  options Json?
}

model Payment {
  id            Int        @id @default(autoincrement())
  transactionId String
  user          User       @relation(fields: [userId], references: [id])
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  userId        Int
  restaurantId  Int
}

enum OrderStatus {
  Pending
  Cooking
  Cooked
  PickedUp
  Delivered
}
